{"version":3,"file":"index.production.js","sources":["../../src/utils.ts","../../src/index.ts"],"sourcesContent":["export type NoInfer<A extends any> = [A][A extends any ? 0 : never]\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  },\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug?.()) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug?.()) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug?.()) {\n      const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n      const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n      const resultFpsPercentage = resultEndTime / 16\n\n      const pad = (str: number | string, num: number) => {\n        str = String(str)\n        while (str.length < num) {\n          str = ' ' + str\n        }\n        return str\n      }\n\n      console.info(\n        `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n        `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120),\n            )}deg 100% 31%);`,\n        opts?.key,\n      )\n    }\n\n    return result!\n  }\n}\n","import { memo } from './utils'\n\nexport * from './utils'\n\n//\n\ntype ScrollAlignment = 'start' | 'center' | 'end' | 'auto'\n\ntype ScrollBehavior = 'auto' | 'smooth'\n\nexport interface ScrollToOptions {\n  align?: ScrollAlignment\n  behavior?: ScrollBehavior\n}\n\ntype ScrollToOffsetOptions = ScrollToOptions\n\ntype ScrollToIndexOptions = ScrollToOptions\n\nexport interface Range {\n  startIndex: number\n  endIndex: number\n  overscan: number\n  count: number\n}\n\ntype Key = number | string\n\nexport interface VirtualItem {\n  key: Key\n  index: number\n  start: number\n  end: number\n  size: number\n}\n\ninterface Rect {\n  width: number\n  height: number\n}\n\n//\n\nexport const defaultKeyExtractor = (index: number) => index\n\nexport const defaultRangeExtractor = (range: Range) => {\n  const start = Math.max(range.startIndex - range.overscan, 0)\n  const end = Math.min(range.endIndex + range.overscan, range.count - 1)\n\n  const arr = []\n\n  for (let i = start; i <= end; i++) {\n    arr.push(i)\n  }\n\n  return arr\n}\n\nconst memoRectCallback = (\n  instance: Virtualizer<any, any>,\n  cb: (rect: Rect) => void,\n) => {\n  let prev: Rect = { height: -1, width: -1 }\n\n  return (rect: Rect) => {\n    if (\n      instance.options.horizontal\n        ? rect.width !== prev.width\n        : rect.height !== prev.height\n    ) {\n      cb(rect)\n    }\n\n    prev = rect\n  }\n}\n\nexport const observeElementRect = (\n  instance: Virtualizer<any, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const observer = new ResizeObserver((entries) => {\n    cb({\n      width: entries[0]?.contentRect.width as number,\n      height: entries[0]?.contentRect.height as number,\n    })\n  })\n\n  if (!instance.scrollElement) {\n    return\n  }\n\n  cb(instance.scrollElement.getBoundingClientRect())\n\n  observer.observe(instance.scrollElement)\n\n  return () => {\n    observer.unobserve(instance.scrollElement)\n  }\n}\n\nexport const observeWindowRect = (\n  instance: Virtualizer<any, any>,\n  cb: (rect: Rect) => void,\n) => {\n  const memoizedCallback = memoRectCallback(instance, cb)\n  const onResize = () =>\n    memoizedCallback({\n      width: instance.scrollElement.innerWidth,\n      height: instance.scrollElement.innerHeight,\n    })\n\n  if (!instance.scrollElement) {\n    return\n  }\n\n  onResize()\n\n  instance.scrollElement.addEventListener('resize', onResize, {\n    capture: false,\n    passive: true,\n  })\n\n  return () => {\n    instance.scrollElement.removeEventListener('resize', onResize)\n  }\n}\n\ntype ObserverMode = 'element' | 'window'\n\nconst scrollProps = {\n  element: ['scrollLeft', 'scrollTop'],\n  window: ['scrollX', 'scrollY'],\n} as const\n\nconst createOffsetObserver = (mode: ObserverMode) => {\n  return (instance: Virtualizer<any, any>, cb: (offset: number) => void) => {\n    if (!instance.scrollElement) {\n      return\n    }\n\n    const propX = scrollProps[mode][0]\n    const propY = scrollProps[mode][1]\n\n    let prevX: number = instance.scrollElement[propX]\n    let prevY: number = instance.scrollElement[propY]\n\n    const scroll = () => {\n      const offset =\n        instance.scrollElement[instance.options.horizontal ? propX : propY]\n\n      cb(Math.max(0, offset - instance.options.scrollMargin))\n    }\n\n    scroll()\n\n    const onScroll = (e: Event) => {\n      const target = e.currentTarget as HTMLElement & Window\n      const scrollX = target[propX]\n      const scrollY = target[propY]\n\n      if (instance.options.horizontal ? prevX - scrollX : prevY - scrollY) {\n        scroll()\n      }\n\n      prevX = scrollX\n      prevY = scrollY\n    }\n\n    instance.scrollElement.addEventListener('scroll', onScroll, {\n      capture: false,\n      passive: true,\n    })\n\n    return () => {\n      instance.scrollElement.removeEventListener('scroll', onScroll)\n    }\n  }\n}\n\nexport const observeElementOffset = createOffsetObserver('element')\nexport const observeWindowOffset = createOffsetObserver('window')\n\nexport const measureElement = <TItemElement extends Element>(\n  element: TItemElement,\n  instance: Virtualizer<any, TItemElement>,\n) => {\n  return Math.round(\n    element.getBoundingClientRect()[\n      instance.options.horizontal ? 'width' : 'height'\n    ],\n  )\n}\n\nexport const windowScroll = <T extends Window>(\n  offset: number,\n  {\n    adjustments,\n    behavior,\n    sync,\n  }: { adjustments?: number; behavior?: ScrollBehavior; sync: boolean },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset =\n    (sync ? offset : offset + instance.options.scrollMargin) +\n    (adjustments ?? 0)\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport const elementScroll = <T extends Element>(\n  offset: number,\n  {\n    adjustments,\n    behavior,\n    sync,\n  }: { adjustments?: number; behavior?: ScrollBehavior; sync: boolean },\n  instance: Virtualizer<T, any>,\n) => {\n  const toOffset =\n    (sync ? offset : offset + instance.options.scrollMargin) +\n    (adjustments ?? 0)\n\n  instance.scrollElement?.scrollTo?.({\n    [instance.options.horizontal ? 'left' : 'top']: toOffset,\n    behavior,\n  })\n}\n\nexport interface VirtualizerOptions<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  // Required from the user\n  count: number\n  getScrollElement: () => TScrollElement | null\n  estimateSize: (index: number) => number\n\n  // Required from the framework adapter (but can be overridden)\n  scrollToFn: (\n    offset: number,\n    options: { adjustments?: number; behavior?: ScrollBehavior; sync: boolean },\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => void\n  observeElementRect: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (rect: Rect) => void,\n  ) => void | (() => void)\n  observeElementOffset: (\n    instance: Virtualizer<TScrollElement, TItemElement>,\n    cb: (offset: number) => void,\n  ) => void | (() => void)\n\n  // Optional\n  debug?: any\n  initialRect?: Rect\n  onChange?: (instance: Virtualizer<TScrollElement, TItemElement>) => void\n  measureElement?: (\n    el: TItemElement,\n    instance: Virtualizer<TScrollElement, TItemElement>,\n  ) => number\n  overscan?: number\n  horizontal?: boolean\n  paddingStart?: number\n  paddingEnd?: number\n  scrollPaddingStart?: number\n  scrollPaddingEnd?: number\n  initialOffset?: number\n  getItemKey?: (index: number) => Key\n  rangeExtractor?: (range: Range) => number[]\n  scrollMargin?: number\n  scrollingDelay?: number\n  indexAttribute?: string\n}\n\nexport class Virtualizer<\n  TScrollElement extends Element | Window,\n  TItemElement extends Element,\n> {\n  private unsubs: (void | (() => void))[] = []\n  options!: Required<VirtualizerOptions<TScrollElement, TItemElement>>\n  scrollElement: TScrollElement | null = null\n  isScrolling: boolean = false\n  private isScrollingTimeoutId: ReturnType<typeof setTimeout> | null = null\n  measurementsCache: VirtualItem[] = []\n  private itemMeasurementsCache: Record<Key, number> = {}\n  private pendingMeasuredCacheIndexes: number[] = []\n  private scrollRect: Rect\n  scrollOffset: number\n  private scrollAdjustments: number = 0\n  private measureElementCache: Record<Key, TItemElement> = {}\n  private pendingScrollToIndexCallback: (() => void) | null = null\n  private getResizeObserver = (() => {\n    let _ro: ResizeObserver | null = null\n\n    return () => {\n      if (_ro) {\n        return _ro\n      } else if (typeof ResizeObserver !== 'undefined') {\n        return (_ro = new ResizeObserver((entries) => {\n          entries.forEach((entry) => {\n            this._measureElement(entry.target as TItemElement, false)\n          })\n        }))\n      } else {\n        return null\n      }\n    }\n  })()\n  range: { startIndex: number; endIndex: number } = {\n    startIndex: 0,\n    endIndex: 0,\n  }\n\n  constructor(opts: VirtualizerOptions<TScrollElement, TItemElement>) {\n    this.setOptions(opts)\n    this.scrollRect = this.options.initialRect\n    this.scrollOffset = this.options.initialOffset\n\n    this.calculateRange()\n  }\n\n  setOptions = (opts: VirtualizerOptions<TScrollElement, TItemElement>) => {\n    Object.entries(opts).forEach(([key, value]) => {\n      if (typeof value === 'undefined') delete (opts as any)[key]\n    })\n\n    this.options = {\n      debug: false,\n      initialOffset: 0,\n      overscan: 1,\n      paddingStart: 0,\n      paddingEnd: 0,\n      scrollPaddingStart: 0,\n      scrollPaddingEnd: 0,\n      horizontal: false,\n      getItemKey: defaultKeyExtractor,\n      rangeExtractor: defaultRangeExtractor,\n      onChange: () => {},\n      measureElement,\n      initialRect: { width: 0, height: 0 },\n      scrollMargin: 0,\n      scrollingDelay: 150,\n      indexAttribute: 'data-index',\n      ...opts,\n    }\n  }\n\n  private notify = () => {\n    this.options.onChange?.(this)\n  }\n\n  private cleanup = () => {\n    this.unsubs.filter(Boolean).forEach((d) => d!())\n    this.unsubs = []\n    this.scrollElement = null\n  }\n\n  _didMount = () => {\n    const ro = this.getResizeObserver()\n    Object.values(this.measureElementCache).forEach((node) => ro?.observe(node))\n\n    return () => {\n      ro?.disconnect()\n\n      this.cleanup()\n    }\n  }\n\n  _willUpdate = () => {\n    this.pendingScrollToIndexCallback?.()\n\n    const scrollElement = this.options.getScrollElement()\n\n    if (this.scrollElement !== scrollElement) {\n      this.cleanup()\n\n      this.scrollElement = scrollElement\n\n      this._scrollToOffset(this.scrollOffset, {\n        adjustments: undefined,\n        behavior: undefined,\n        sync: true,\n      })\n\n      this.unsubs.push(\n        this.options.observeElementRect(this, (rect) => {\n          this.scrollRect = rect\n          this.calculateRange()\n        }),\n      )\n\n      this.unsubs.push(\n        this.options.observeElementOffset(this, (offset) => {\n          if (this.isScrollingTimeoutId !== null) {\n            clearTimeout(this.isScrollingTimeoutId)\n            this.isScrollingTimeoutId = null\n          }\n\n          const onIsScrollingChange = (isScrolling: boolean) => {\n            if (this.isScrolling !== isScrolling) {\n              this.isScrolling = isScrolling\n              this.notify()\n            }\n          }\n\n          this.scrollAdjustments = 0\n\n          if (this.scrollOffset !== offset) {\n            this.scrollOffset = offset\n            onIsScrollingChange(true)\n          }\n\n          this.calculateRange()\n\n          this.isScrollingTimeoutId = setTimeout(() => {\n            this.isScrollingTimeoutId = null\n            onIsScrollingChange(false)\n          }, this.options.scrollingDelay)\n        }),\n      )\n    } else if (!this.isScrolling) {\n      this.calculateRange()\n    }\n  }\n\n  private getSize = () => {\n    return this.scrollRect[this.options.horizontal ? 'width' : 'height']\n  }\n\n  private getMeasurements = memo(\n    () => [\n      this.options.count,\n      this.options.paddingStart,\n      this.options.getItemKey,\n      this.itemMeasurementsCache,\n    ],\n    (count, paddingStart, getItemKey, measurementsCache) => {\n      const min =\n        this.pendingMeasuredCacheIndexes.length > 0\n          ? Math.min(...this.pendingMeasuredCacheIndexes)\n          : 0\n      this.pendingMeasuredCacheIndexes = []\n\n      const measurements = this.measurementsCache.slice(0, min)\n\n      for (let i = min; i < count; i++) {\n        const key = getItemKey(i)\n        const measuredSize = measurementsCache[key]\n        const start = measurements[i - 1]\n          ? measurements[i - 1]!.end\n          : paddingStart\n        const size =\n          typeof measuredSize === 'number'\n            ? measuredSize\n            : this.options.estimateSize(i)\n        const end = start + size\n        measurements[i] = { index: i, start, size, end, key }\n      }\n\n      this.measurementsCache = measurements\n      return measurements\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getMeasurements',\n      debug: () => this.options.debug,\n    },\n  )\n\n  calculateRange = memo(\n    () => [this.getMeasurements(), this.getSize(), this.scrollOffset],\n    (measurements, outerSize, scrollOffset) => {\n      const range = calculateRange({\n        measurements,\n        outerSize,\n        scrollOffset,\n      })\n      if (\n        range.startIndex !== this.range.startIndex ||\n        range.endIndex !== this.range.endIndex\n      ) {\n        this.range = range\n        this.notify()\n      }\n      return this.range\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'calculateRange',\n      debug: () => this.options.debug,\n    },\n  )\n\n  private getIndexes = memo(\n    () => [\n      this.options.rangeExtractor,\n      this.range,\n      this.options.overscan,\n      this.options.count,\n    ],\n    (rangeExtractor, range, overscan, count) => {\n      return rangeExtractor({\n        ...range,\n        overscan,\n        count: count,\n      })\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  indexFromElement = (node: TItemElement) => {\n    const attributeName = this.options.indexAttribute\n    const indexStr = node.getAttribute(attributeName)\n\n    if (!indexStr) {\n      console.warn(\n        `Missing attribute name '${attributeName}={index}' on measured element.`,\n      )\n      return -1\n    }\n\n    return parseInt(indexStr, 10)\n  }\n\n  private _measureElement = (node: TItemElement, _sync: boolean) => {\n    const index = this.indexFromElement(node)\n\n    const item = this.measurementsCache[index]\n    if (!item) {\n      return\n    }\n\n    const prevNode = this.measureElementCache[item.key]\n\n    const ro = this.getResizeObserver()\n\n    if (!node.isConnected) {\n      if (prevNode) {\n        ro?.unobserve(prevNode)\n        delete this.measureElementCache[item.key]\n      }\n      return\n    }\n\n    if (!prevNode || prevNode !== node) {\n      if (prevNode) {\n        ro?.unobserve(prevNode)\n      }\n      this.measureElementCache[item.key] = node\n      ro?.observe(node)\n    }\n\n    const measuredItemSize = this.options.measureElement(node, this)\n\n    const itemSize = this.itemMeasurementsCache[item.key] ?? item.size\n\n    const delta = measuredItemSize - itemSize\n\n    if (delta !== 0) {\n      if (item.start < this.scrollOffset && this.isScrolling) {\n        if (process.env.NODE_ENV !== 'production' && this.options.debug) {\n          console.info('correction', delta)\n        }\n\n        this._scrollToOffset(this.scrollOffset, {\n          adjustments: (this.scrollAdjustments += delta),\n          behavior: undefined,\n          sync: false,\n        })\n      }\n\n      this.pendingMeasuredCacheIndexes.push(index)\n      this.itemMeasurementsCache = {\n        ...this.itemMeasurementsCache,\n        [item.key]: measuredItemSize,\n      }\n      this.notify()\n    }\n  }\n\n  measureElement = (node: TItemElement | null) => {\n    if (!node) {\n      return\n    }\n\n    this._measureElement(node, true)\n  }\n\n  getVirtualItems = memo(\n    () => [this.getIndexes(), this.getMeasurements()],\n    (indexes, measurements) => {\n      const virtualItems: VirtualItem[] = []\n\n      for (let k = 0, len = indexes.length; k < len; k++) {\n        const i = indexes[k]!\n        const measurement = measurements[i]!\n\n        virtualItems.push(measurement)\n      }\n\n      return virtualItems\n    },\n    {\n      key: process.env.NODE_ENV !== 'production' && 'getIndexes',\n      debug: () => this.options.debug,\n    },\n  )\n\n  getOffsetForAlignment = (toOffset: number, align: ScrollAlignment) => {\n    const offset = this.scrollOffset\n    const size = this.getSize()\n\n    if (align === 'auto') {\n      if (toOffset <= offset) {\n        align = 'start'\n      } else if (toOffset >= offset + size) {\n        align = 'end'\n      } else {\n        align = 'start'\n      }\n    }\n\n    if (align === 'start') {\n      return toOffset\n    } else if (align === 'end') {\n      return toOffset - size\n    } else if (align === 'center') {\n      return toOffset - size / 2\n    }\n    return toOffset\n  }\n\n  scrollToOffset = (\n    toOffset: number,\n    { align = 'start', behavior }: ScrollToOffsetOptions = {},\n  ) => {\n    const options = {\n      adjustments: undefined,\n      behavior,\n      sync: false,\n    }\n    this._scrollToOffset(this.getOffsetForAlignment(toOffset, align), options)\n  }\n\n  scrollToIndex = (\n    index: number,\n    { align = 'auto', behavior }: ScrollToIndexOptions = {},\n  ) => {\n    this.pendingScrollToIndexCallback = null\n\n    const offset = this.scrollOffset\n    const size = this.getSize()\n    const { count } = this.options\n\n    const measurements = this.getMeasurements()\n    const measurement = measurements[Math.max(0, Math.min(index, count - 1))]\n\n    if (!measurement) {\n      throw new Error(`VirtualItem not found for index = ${index}`)\n    }\n\n    if (align === 'auto') {\n      if (measurement.end >= offset + size - this.options.scrollPaddingEnd) {\n        align = 'end'\n      } else if (\n        measurement.start <=\n        offset + this.options.scrollPaddingStart\n      ) {\n        align = 'start'\n      } else {\n        return\n      }\n    }\n\n    const getOffsetForIndexAndAlignment = (measurement: VirtualItem) => {\n      const toOffset =\n        align === 'end'\n          ? measurement.end + this.options.scrollPaddingEnd\n          : measurement.start - this.options.scrollPaddingStart\n\n      return this.getOffsetForAlignment(toOffset, align)\n    }\n\n    const toOffset = getOffsetForIndexAndAlignment(measurement)\n\n    if (toOffset === offset) {\n      return\n    }\n\n    const options = {\n      adjustments: undefined,\n      behavior,\n      sync: false,\n    }\n    this._scrollToOffset(toOffset, options)\n\n    const isDynamic = Object.keys(this.measureElementCache).length > 0\n\n    if (isDynamic) {\n      this.pendingScrollToIndexCallback = () => {\n        this.scrollToIndex(index, { align, behavior })\n      }\n    }\n  }\n\n  scrollBy = (adjustments: number, options?: { behavior: ScrollBehavior }) => {\n    this._scrollToOffset(this.scrollOffset, {\n      adjustments,\n      behavior: options?.behavior,\n      sync: false,\n    })\n  }\n\n  getTotalSize = () =>\n    (this.getMeasurements()[this.options.count - 1]?.end ||\n      this.options.paddingStart) + this.options.paddingEnd\n\n  private _scrollToOffset = (\n    offset: number,\n    {\n      adjustments,\n      behavior,\n      sync,\n    }: {\n      adjustments: number | undefined\n      behavior: ScrollBehavior | undefined\n      sync: boolean\n    },\n  ) => {\n    this.options.scrollToFn(offset, { behavior, sync, adjustments }, this)\n  }\n\n  measure = () => {\n    this.itemMeasurementsCache = {}\n    this.notify()\n  }\n}\n\nconst findNearestBinarySearch = (\n  low: number,\n  high: number,\n  getCurrentValue: (i: number) => number,\n  value: number,\n) => {\n  while (low <= high) {\n    const middle = ((low + high) / 2) | 0\n    const currentValue = getCurrentValue(middle)\n\n    if (currentValue < value) {\n      low = middle + 1\n    } else if (currentValue > value) {\n      high = middle - 1\n    } else {\n      return middle\n    }\n  }\n\n  if (low > 0) {\n    return low - 1\n  } else {\n    return 0\n  }\n}\n\nfunction calculateRange({\n  measurements,\n  outerSize,\n  scrollOffset,\n}: {\n  measurements: VirtualItem[]\n  outerSize: number\n  scrollOffset: number\n}) {\n  const count = measurements.length - 1\n  const getOffset = (index: number) => measurements[index]!.start\n\n  const startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset)\n  let endIndex = startIndex\n\n  while (\n    endIndex < count &&\n    measurements[endIndex]!.end < scrollOffset + outerSize\n  ) {\n    endIndex++\n  }\n\n  return { startIndex, endIndex }\n}\n"],"names":["memo","getDeps","fn","opts","result","deps","depTime","key","debug","Date","now","resultTime","newDeps","length","some","dep","index","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","defaultKeyExtractor","defaultRangeExtractor","range","start","startIndex","overscan","end","endIndex","count","arr","i","push","scrollProps","element","window","createOffsetObserver","mode","instance","cb","scrollElement","propX","propY","prevX","prevY","scroll","offset","options","horizontal","scrollMargin","onScroll","e","target","currentTarget","scrollX","scrollY","addEventListener","capture","passive","removeEventListener","observeElementOffset","observeWindowOffset","measureElement","getBoundingClientRect","_ro","_this","this","unsubs","isScrolling","isScrollingTimeoutId","measurementsCache","itemMeasurementsCache","pendingMeasuredCacheIndexes","scrollAdjustments","measureElementCache","pendingScrollToIndexCallback","getResizeObserver","ResizeObserver","entries","forEach","entry","_measureElement","setOptions","Object","_ref3","_extends","initialOffset","paddingStart","paddingEnd","scrollPaddingStart","scrollPaddingEnd","getItemKey","rangeExtractor","initialRect","width","height","scrollingDelay","indexAttribute","notify","cleanup","filter","Boolean","d","_didMount","ro","values","node","observe","disconnect","_willUpdate","getScrollElement","_scrollToOffset","scrollOffset","adjustments","undefined","behavior","sync","observeElementRect","rect","scrollRect","calculateRange","clearTimeout","onIsScrollingChange","setTimeout","getSize","getMeasurements","measurements","slice","measuredSize","size","estimateSize","process","outerSize","_ref7","low","high","getCurrentValue","value","middle","currentValue","findNearestBinarySearch","getIndexes","indexFromElement","attributeName","indexStr","getAttribute","parseInt","warn","_sync","_this$itemMeasurement","item","prevNode","isConnected","unobserve","_extends2","measuredItemSize","delta","getVirtualItems","indexes","virtualItems","k","len","measurement","getOffsetForAlignment","toOffset","align","scrollToOffset","_temp","_ref4","_ref4$align","scrollToIndex","_temp2","_ref5","_ref5$align","Error","getOffsetForIndexAndAlignment","keys","scrollBy","getTotalSize","_this$getMeasurements","_ref6","scrollToFn","measure","_instance$scrollEleme3","_instance$scrollEleme4","scrollTo","observer","_entries$","_entries$2","contentRect","memoizedCallback","prev","memoRectCallback","onResize","innerWidth","innerHeight","_instance$scrollEleme","_instance$scrollEleme2"],"mappings":"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"}